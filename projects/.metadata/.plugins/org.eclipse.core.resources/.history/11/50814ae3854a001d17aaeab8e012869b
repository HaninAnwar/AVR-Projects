#include "STD_TYPES.h"
#include <util/delay.h>
#include "MAPPING.h"

#include "DIO_interface.h"
#include "PORT_interface.h"
#include "ADC_interface.h"

#include "CLCD_interface.h"
#include "SSD_interface.h"
#include "KEYPAD_interface.h"
#include "MOTOR_interface.h"

void HamokshaStand(void);

void LED_IndecationFunc(u16 Copy_u16Reading);

void main(void)
{
	u8 Local_u8PressedKey,Local_u8CurrentDigit,Local_u8Trials,Local_u8RegistrationFlag;
	u8 Local_u8EnteredArr[4] = {0,0,0,0};
	u16 Local_u16Password,Local_u16EnteredPass,Local_u16ID;

	u16 Local_u16Reading;

	SSD_T *SSD1;
	SSD1->Port = DIO_u8PORTB;
	SSD1->EnablePort = DIO_u8PORTB;
	SSD1->EnablePin = DIO_u8PIN7;
	SSD1->ComType = SSD_u8COM_CATHODE;

	/*Initialization*/
	PORT_voidInit();
	CLCD_voidInit();
	ADC_voidInit();

	SSD_u8Enable(SSD1);

	Local_u8CurrentDigit = 0;
	Local_u8Trials = 3;
	Local_u8RegistrationFlag = 0;

	/*Welcome*/
	CLCD_voidSendString("Welcome");
	_delay_ms(3000);

	/*User Registration*/
	CLCD_voidSendCommand(1);
	CLCD_voidSendString("Enter ID :");

	/*ID Entering*/
	for(Local_u8CurrentDigit = 0; Local_u8CurrentDigit < 4; Local_u8CurrentDigit++)
	{
		do
		{
			Local_u8PressedKey = KPD_GetPressedKey();
		}
		while(Local_u8PressedKey == 0xff);

		/*Store & Display ID*/
		Local_u8EnteredArr[Local_u8CurrentDigit] = Local_u8PressedKey;
		CLCD_voidWriteNumber(Local_u8PressedKey,1,Local_u8CurrentDigit);

	}
	_delay_ms(250);

	/*Store ID , Password : inverse of ID*/
	Local_u16ID = Local_u8EnteredArr[0]*1000+Local_u8EnteredArr[1]*100+Local_u8EnteredArr[2]*10+Local_u8EnteredArr[3];
	Local_u16Password = Local_u8EnteredArr[0]+Local_u8EnteredArr[1]*10+Local_u8EnteredArr[2]*100+Local_u8EnteredArr[3]*1000;

	/*Password Entering*/
	CLCD_voidSendCommand(1);
	CLCD_voidSendString("Enter Password:");

	/*Only 3 trials are allowed*/
	for(Local_u8Trials = 0; Local_u8Trials < 3; Local_u8Trials++)
	{
		/*Display trials on SSD*/
		SSD_u8SetNumber(3-Local_u8Trials,SSD1);

		for(Local_u8CurrentDigit = 0; Local_u8CurrentDigit < 4; Local_u8CurrentDigit++)
		{
			do
			{
				Local_u8PressedKey = KPD_GetPressedKey();
			}
			while(Local_u8PressedKey == 0xff);

			/*Store & Display password*/
			Local_u8EnteredArr[Local_u8CurrentDigit] = Local_u8PressedKey;
			CLCD_voidWriteNumber(Local_u8PressedKey,1,Local_u8CurrentDigit);

		}
		_delay_ms(250);

		/*Store entered password*/
		Local_u16EnteredPass = Local_u8EnteredArr[0]*1000+Local_u8EnteredArr[1]*100+Local_u8EnteredArr[2]*10+Local_u8EnteredArr[3];

		if(Local_u16Password == Local_u16EnteredPass)
		{
			Local_u8RegistrationFlag = 1;
			break;
		}

		else
		{
			CLCD_voidSendCommand(1);
			CLCD_voidSendString("Wrong, try again");
		}

	}

	/*Trials are finished with Wrong password*/
	if (Local_u8RegistrationFlag != 1)
	{
		SSD_u8SetNumber(0,SSD1);
		CLCD_voidSendCommand(1);
		CLCD_voidSendString("Bye Bye");

	}

	while(1)
	{
		if(Local_u8RegistrationFlag == 1)
		{
			CLCD_voidSendCommand(1);
			CLCD_voidSendString("Welcome");
			CLCD_voidWriteNumber(Local_u16ID,0,8);
			HamokshaStand();
			_delay_ms(3000);
		}

		ADC_u8StartConversionAsynch(CHANNEL_ADC0,&Local_u16Reading,&LED_IndecationFunc);


	}
}

void HamokshaStand(void)
{
	u8 Local_pu8uHead[8] =	{
			0b00001110,
			0b00010001,
			0b00010001,
			0b00010001,
			0b00001110,
			0b00000100,
			0b00000100,
			0b00000100,
	};
	u8 Local_pu8uStand[8] =	{
			0b00011111,
			0b00000100,
			0b00000100,
			0b00000100,
			0b00000100,
			0b00001010,
			0b00010001,
			0b00000000,
	};
	CLCD_voidWriteSpcialCharacter(Local_pu8uHead,1,0,15);
	CLCD_voidWriteSpcialCharacter(Local_pu8uStand,2,1,15);

}

void LED_IndecationFunc(void)
{
	u8 Local_u8Leds;

	SSD_T *SSD1;
	SSD1->Port = DIO_u8PORTB;
	SSD1->EnablePort = DIO_u8PORTB;
	SSD1->EnablePin = DIO_u8PIN7;
	SSD1->ComType = SSD_u8COM_CATHODE;

	SSD_u8Enable(SSD1);

	Local_u8Leds = Mapping(0,8,0,255,Copy_u16Reading);

	SSD_u8SetNumber(Local_u8Leds,SSD1);

}
