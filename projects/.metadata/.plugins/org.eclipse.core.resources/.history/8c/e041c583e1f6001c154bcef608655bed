/********************* **************************************************/
/***********************************************************************/
/************************ AUTHER : Hanin Anwar  ************************/
/************************ LAYER  : MCAL         ************************/
/************************ SWC    : SDD          ************************/
/************************ VERSIO : 1.00         ************************/
/***********************************************************************/
/***********************************************************************/

#include "STD_TYPES.h"
#include "BIT_MATH.h"

#include "SDD_registers.h"
#include "SDD_interface.h"
#include "SDD_config.h"
#include "SDD_private.h"

u8 SDD_u8SetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_Direction)
{
    u8 Local_Errorstate = 0;
    
    if (Copy_u8Pin <= SDD_u8PIN7)
        {
            if (Copy_Direction == SDD_u8PIN_INPUT)
            {
              switch(Copy_u8Port)
                {
                    case SDD_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
                    case SDD_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
                    case SDD_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
                    case SDD_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
                    default : Local_Errorstate = 1;
                }
            } 

            else if (Copy_Direction == SDD_u8PIN_OUTPUT)
            {
                switch(Copy_u8Port)
                {
                    case SDD_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
                    case SDD_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
                    case SDD_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
                    case SDD_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
                    default : Local_Errorstate = 1;
                }
            }

            else 
            {
                    Local_Errorstate = 1;
            }
            
        }
            
        else 
        {
            Local_Errorstate = 1;
        }
    
    return Local_Errorstate;
}
u8 SDD_u8SetPortDirection(u8 Copy_u8Port ,u8 Copy_Direction)
{
    u8 Local_Errorstate = 0;
    
    
    switch(Copy_u8Port)
    {
        case SDD_u8PORTA : DDRA = Copy_Direction;  break;
        case SDD_u8PORTB : DDRB = Copy_Direction;  break;
        case SDD_u8PORTC : DDRC = Copy_Direction;  break;
        case SDD_u8PORTD : DDRD = Copy_Direction;  break;
        default : Local_Errorstate = 1;
    }
    
    return Local_Errorstate;
}

u8 SDD_u8SetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
    u8 Local_Errorstate = 0;
    
    if (Copy_u8Pin <= SDD_u8PIN7)
        {
            if (Copy_u8Value == SDD_u8PIN_LOW)
            {
              switch(Copy_u8Port)
                {
                    case SDD_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
                    case SDD_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
                    case SDD_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
                    case SDD_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
                    default : Local_Errorstate = 1;
                }
            } 

            else if (Copy_u8Value == SDD_u8PIN_HIGH)
            {
                switch(Copy_u8Port)
                {
                    case SDD_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
                    case SDD_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
                    case SDD_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
                    case SDD_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
                    default : Local_Errorstate = 1;
                }
            }

            else 
            {
                Local_Errorstate = 1;
            }
            
        }
            
        else 
        {
            Local_Errorstate = 1;
        }
    
    return Local_Errorstate;
}
u8 SDD_u8SetPortValue(u8 Copy_u8Port , u8 Copy_u8Value)
{
    u8 Local_Errorstate = 0;
    
    switch(Copy_u8Port)
    {
        case SDD_u8PORTA : PORTA = Copy_u8Value;  break;
        case SDD_u8PORTB : PORTB = Copy_u8Value;  break;
        case SDD_u8PORTC : PORTC = Copy_u8Value;  break;
        case SDD_u8PORTD : PORTD = Copy_u8Value;  break;
        default : Local_Errorstate = 1;
    }
    
    return Local_Errorstate;
}


u8 SDD_u8SetNumber(u8 Copy_u8Number , SDD_T* SDD)
{
    u8 Local_Errorstate = 0;
    u8 Local_NumArr[10] = {	0b00111111 ,
							0b00000110 ,
							0b01011011 ,
							0b01001111 ,
							0b01100110 ,
							0b01101101 ,
							0b01111101 ,
							0b00000111 ,
							0b01111111 ,
							0b01101111
    						};

    if(SDD.COM_TYPE == SDD_ANODE)
    {
    	switch(Copy_u8Number)
		{
			 case SDD_u8NUM0 : SDD_u8SetPortValue(SDD.EnablePort ,Local_NumArr[0]); break;
			 case SDD_u8NUM1 : SDD_u8SetPortValue(SDD.EnablePort ,Local_NumArr[1]); break;
			 case SDD_u8NUM2 : SDD_u8SetPortValue(SDD.EnablePort ,Local_NumArr[2]); break;
			 case SDD_u8NUM3 : SDD_u8SetPortValue(SDD.EnablePort ,Local_NumArr[3]); break;
			 case SDD_u8NUM4 : SDD_u8SetPortValue(SDD.EnablePort ,Local_NumArr[4]); break;
			 case SDD_u8NUM5 : SDD_u8SetPortValue(SDD.EnablePort ,Local_NumArr[5]); break;
			 case SDD_u8NUM6 : SDD_u8SetPortValue(SDD.EnablePort ,Local_NumArr[6]); break;
			 case SDD_u8NUM7 : SDD_u8SetPortValue(SDD.EnablePort ,Local_NumArr[7]); break;
			 case SDD_u8NUM8 : SDD_u8SetPortValue(SDD.EnablePort ,Local_NumArr[8]); break;
			 case SDD_u8NUM9 : SDD_u8SetPortValue(SDD.EnablePort ,Local_NumArr[9]); break;
			 default : Local_Errorstate = 1;
		}
    }
    else if (SDD.COM_TYPE == SDD_CATHODE)
    {
    	switch(Copy_u8Number)
		{
			 case SDD_u8NUM0 : SDD_u8SetPortValue(SDD.EnablePort ,~Local_NumArr[0]); break;
			 case SDD_u8NUM1 : SDD_u8SetPortValue(SDD.EnablePort ,~Local_NumArr[1]); break;
			 case SDD_u8NUM2 : SDD_u8SetPortValue(SDD.EnablePort ,~Local_NumArr[2]); break;
			 case SDD_u8NUM3 : SDD_u8SetPortValue(SDD.EnablePort ,~Local_NumArr[3]); break;
			 case SDD_u8NUM4 : SDD_u8SetPortValue(SDD.EnablePort ,~Local_NumArr[4]); break;
			 case SDD_u8NUM5 : SDD_u8SetPortValue(SDD.EnablePort ,~Local_NumArr[5]); break;
			 case SDD_u8NUM6 : SDD_u8SetPortValue(SDD.EnablePort ,~Local_NumArr[6]); break;
			 case SDD_u8NUM7 : SDD_u8SetPortValue(SDD.EnablePort ,~Local_NumArr[7]); break;
			 case SDD_u8NUM8 : SDD_u8SetPortValue(SDD.EnablePort ,~Local_NumArr[8]); break;
			 case SDD_u8NUM9 : SDD_u8SetPortValue(SDD.EnablePort ,~Local_NumArr[9]); break;
			 default : Local_Errorstate = 1;
		}

    }

    else
    {
    	Local_Errorstate = 1;
    }
    return Local_Errorstate;

}
