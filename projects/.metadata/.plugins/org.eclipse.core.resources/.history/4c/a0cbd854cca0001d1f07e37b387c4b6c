#include "STD_TYPES.h"
#include <util/delay.h>

#include "DIO_interface.h"
#include "PORT_interface.h"
#include "EXTI_interface.h"
#include "GIE_interface.h"
#include "TIMER_interface.h"

#include "CLCD_interface.h"
#include "MOTOR_interface.h"
#include "MAPPING.h"


#define F_CPU 8000000UL
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <string.h>
#include <stdlib.h>


void Ultrasonic_Func(void);


static u8 Ultrasonic_Time=0;

void main (void)
{
	PORT_voidInit();
	CLCD_voidInit();

	TIMER1_u8Init(TIMER1_CHANNEL_A,NORMAL,DISCONNECT,TIMER_DIV_BY_1);
	ICU_voidInit();

	TIMER_u8SetCallBack(TIMER1_ICU_INT,&Ultrasonic_Func);
	GIE_voidEnable();


	DC_Motor Motor1 ,Motor2 ,Motor3 ,Motor4;

	Motor1.Port = DIO_u8PORTA;
	Motor1.Pin1 = DIO_u8PIN0;
	Motor1.Pin2 = DIO_u8PIN1;

	Motor2.Port = DIO_u8PORTA;
	Motor2.Pin1 = DIO_u8PIN2;
	Motor2.Pin2 = DIO_u8PIN3;


	Motor3.Port = DIO_u8PORTA;
	Motor3.Pin1 = DIO_u8PIN3;
	Motor3.Pin2 = DIO_u8PIN4;

	Motor4.Port = DIO_u8PORTA;
	Motor4.Pin1 = DIO_u8PIN5;
	Motor4.Pin2 = DIO_u8PIN6;

	u32 Local_u32Value,Local_u8Temp;
	TIMSK = (1 << TOIE1);	/* Enable Timer1 overflow interrupts */
	TCCR1A = 0;		/* Set all bit to zero Normal operation */

	while(1)
	{
		/* Give 10us trigger pulse on trig. pin to HC-SR04 */
		PORTA |= (1 << Trigger_pin);
		_delay_us(10);
		PORTA &= (~(1 << Trigger_pin));

		TCNT1 = 0;	/* Clear Timer counter */
		TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
		TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
		TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */

		/*Calculate width of Echo by Input Capture (ICP) */

		while ((TIFR & (1 << ICF1)) == 0);/* Wait for rising edge */
		TCNT1 = 0;	/* Clear Timer counter */
		TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
		TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
		TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
		TimerOverflow = 0;/* Clear Timer overflow count */

		while ((TIFR & (1 << ICF1)) == 0);/* Wait for falling edge */
		count = ICR1 + (65535 * TimerOverflow);	/* Take count */
		/* 8MHz Timer freq, sound speed =343 m/s */
		distance = (double)count / 466.47;

		dtostrf(distance, 2, 2, string);/* distance to string */
		strcat(string, " cm   ");	/* Concat unit i.e.cm */
		LCD_String_xy(2, 0, "Dist = ");
		LCD_String_xy(2, 7, string);	/* Print distance */
		_delay_ms(200);
	}
	//	while(1)
	//	{
	//
	////		CLCD_voidSendCommand(1);
	//		DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN7,DIO_u8PIN_HIGH);
	//		_delay_us(10);
	//		DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN7,DIO_u8PIN_LOW);
	////		CLCD_voidWriteNumber(2,1,0);
	//
	//		while(Ultrasonic_Time == 0);
	//		Local_u32Value = Ultrasonic_Time*34300/2;
	//
	//		CLCD_voidWriteNumber(Local_u32Value,0,0);
	//	}
}

void Ultrasonic_Func(void)
{
	static u8 Local_u8Counter = 0;

	static u8 Local_u8PulseStart , Local_u8PulseEnd;

	Local_u8Counter++;


	/*Pulse is started*/
	if(Local_u8Counter % 2 == 1)
	{
		Local_u8PulseStart = ICU_u16ReadingICU();
		ICU_voidSetTiggerEdge(FALLING_EDGE);

	}

	/*Pulse is ended*/
	else
	{
		Local_u8PulseEnd = ICU_u16ReadingICU();
		ICU_voidSetTiggerEdge(RISING_EDGE);
	}

	Ultrasonic_Time = Local_u8PulseStart - Local_u8PulseEnd;

}
