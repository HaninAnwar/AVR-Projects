#include "STD_TYPES.h"
#include <util/delay.h>

#include "DIO_interface.h"
#include "PORT_interface.h"
#include "TIMER_interface.h"
#include "GIE_interface.h"
#include "EXTI_interface.h"
#include "USART_interface.h"

#include "LED_interface.h"
#include "ULTSONC_interface.h"
#include "BLTH_interface.h"
#include "METDECT_interface.h"
#include "MOTOR_interface.h"


DC_Motor Left_Motor,Right_Motor;

void Motion_voidFowrd(void);
void Motion_voidBack(void);
void Motion_voidLeft(void);
void Motion_voidRight(void);




void main(void)
{
	u8 Local_u8Motion,Local_u8Obstacle,Local_u8Mine;

	LED_T *Left_Forwd,*Left_Back,*Right_Forwd,*Right_Back;


	Left_Forwd->Port = DIO_u8PORTA;
	Left_Forwd->Pin = DIO_u8PIN4;
	Left_Forwd->ConnectionType = LED_u8SOURCE;


	Right_Forwd->Port = DIO_u8PORTA;
	Right_Forwd->Pin = DIO_u8PIN5;
	Right_Forwd->ConnectionType = LED_u8SOURCE;

	Left_Back->Port = DIO_u8PORTA;
	Left_Back->Pin = DIO_u8PIN6;
	Left_Back->ConnectionType = LED_u8SOURCE;

	Right_Back->Port = DIO_u8PORTA;
	Right_Back->Pin = DIO_u8PIN7;
	Right_Back->ConnectionType = LED_u8SOURCE;


	Right_Motor.Port = DIO_u8PORTA;
	Right_Motor.Pin1 = DIO_u8PIN4;
	Right_Motor.Pin2 = DIO_u8PIN6;

	Left_Motor.Port = DIO_u8PORTA;
	Left_Motor.Pin1 = DIO_u8PIN5;
	Left_Motor.Pin2 = DIO_u8PIN7;

	PORT_voidInit();

	/*Initialize timer0 for generate trigger pulse each 1ms*/
	TIMER0_u8Init(NORMAL,DISCONNECT,TIMER_DIV_BY_1);

	/*Timer1 for echo pulse calculation*/
	TIMER1_u8Init(TIMER1_CHANNEL_A,NORMAL,DISCONNECT,TIMER_DIV_BY_1);

	USRAT_voidInit();


	/*Initiate Metal Detector*/
	METDECT_voidInitMetalDetector();

	/*Initiate Bluetooth*/
	BLTH_voidInitBluetooth();

	/*Initiate Ultrasonic*/
	ULTSONC_voidInitUltrasnoic();

	/*EXT0 On Change for Metal Detector*/
	EXTI_voidInt2Init();

	GIE_voidEnable();

	//
	//		Motion_voidFowrd();
	//				_delay_ms(3000);
	//				DIO_u8SetPortValue(Left_Back->Port,DIO_u8PIN_LOW);
	//				Motion_voidBack();
	//				_delay_ms(3000);
	//				DIO_u8SetPortValue(Left_Back->Port,DIO_u8PIN_LOW);
	//
	//				Motion_voidLeft();
	//				_delay_ms(3000);
	//				DIO_u8SetPortValue(Left_Back->Port,DIO_u8PIN_LOW);
	//
	//				Motion_voidRight();
	//				_delay_ms(3000);
	//				DIO_u8SetPortValue(Left_Back->Port,DIO_u8PIN_LOW);


	while(1)
	{

		Local_u8Motion = BLTH_u8GetBluetoothReading();
		Local_u8Mine = METDECT_u8GetMetalDetector();
		Local_u8Obstacle = ULTSONC_u8GetUltrasnoic();


//		if(Local_u8Motion == BLTH_MOVE)
//		{
//			if (Local_u8Obstacle == ULTSONC_OBSTACLE)
//			{
//				DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_HIGH);
//
//			}
//
//		}
//		else
//		{
//			DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_LOW);
//
//		}

		/*Start Motion*/
		if(Local_u8Motion == BLTH_MOVE)
		{
			DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_HIGH);

			/*No Metal , No Obstacle*/
//			if ((Local_u8Obstacle == ULTSONC_NO_OBSTACLE) && (Local_u8Mine == METDECT_NO_MINE))
//			{
//				/*Move Forward*/
//				Motion_voidFowrd();
//			}

			/*There is an obstacle*/
			if (Local_u8Obstacle == ULTSONC_OBSTACLE)
			{
				/*Stop*/
				DIO_u8SetPortValue(Left_Back->Port,DIO_u8PIN_LOW);

				/*Turn Left*/
				Motion_voidLeft();

				_delay_ms(1000);

				/*Stop*/
				DIO_u8SetPortValue(Left_Back->Port,DIO_u8PIN_LOW);
				//				_delay_ms(500);

			}

			/*There is a mine*/
			else if (Local_u8Mine == METDECT_MINE)
			{
				/*Stop*/
				DIO_u8SetPortValue(Left_Back->Port,DIO_u8PIN_LOW);

				/*Send notification*/
				USART_voidSendString("MineDetected");

				_delay_ms(2000);
				break;
			}

			else
			{
				/*Move Forward*/
				Motion_voidFowrd();n
			}
		}

		else
		{
			/*Stop*/
			DIO_u8SetPortValue(Left_Back->Port,DIO_u8PIN_LOW);
		}

	}
}
void Motion_voidFowrd(void)
{

	MOTOR_u8DCRotate(&Right_Motor,MOTOR_CLK_WISE);
	MOTOR_u8DCRotate(&Left_Motor,MOTOR_CLK_WISE);

}
void Motion_voidBack(void)
{

	MOTOR_u8DCRotate(&Right_Motor,MOTOR_UNTI_CLK_WISE);
	MOTOR_u8DCRotate(&Left_Motor,MOTOR_UNTI_CLK_WISE);
}

void Motion_voidRight(void)
{
	MOTOR_u8DCRotate(&Right_Motor,MOTOR_UNTI_CLK_WISE);
	MOTOR_u8DCRotate(&Left_Motor,MOTOR_CLK_WISE);

}
void Motion_voidLeft(void)
{
	MOTOR_u8DCRotate(&Right_Motor,MOTOR_CLK_WISE);
	MOTOR_u8DCRotate(&Left_Motor,MOTOR_UNTI_CLK_WISE);


}
