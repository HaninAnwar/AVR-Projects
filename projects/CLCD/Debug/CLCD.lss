
CLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001a2e  00001ac2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800068  00800068  00001aca  2**0
                  ALLOC
  3 .stab         000012a8  00000000  00000000  00001acc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ad1  00000000  00000000  00002d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00003845  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00003985  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00003af5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000573e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00006629  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000073d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007538  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000077c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00007f93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a9 36       	cpi	r26, 0x69	; 105
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee e2       	ldi	r30, 0x2E	; 46
      78:	fa e1       	ldi	r31, 0x1A	; 26
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <main>
      8a:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:
#include "CLCD_private.h"

u8 Global_u8CountChar;

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS LOW for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <DIO_u8SetPinValue>

	/*Set RW LOW for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <DIO_u8SetPinValue>

	/*Set Command to data port*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 84 0b 	call	0x1708	; 0x1708 <DIO_u8SetPortValue>

	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <DIO_u8SetPinValue>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidSendCommand+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <DIO_u8SetPinValue>

}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
//	{
//		CLCD_voidGoToXY(1,0);
//	}

//	DIO_u8SetPortDirection(CLCD_DATA_PORT,DIO_u8PORT_OUTPUT);
	if(Global_u8CountChar == 16)
     c98:	80 91 68 00 	lds	r24, 0x0068
     c9c:	80 31       	cpi	r24, 0x10	; 16
     c9e:	21 f4       	brne	.+8      	; 0xca8 <CLCD_voidSendData+0x26>
	{
		CLCD_voidGoToXY(1,0);
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <CLCD_voidGoToXY>
	}

	/*Set RS HIGH for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	41 e0       	ldi	r20, 0x01	; 1
     cae:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <DIO_u8SetPinValue>

	/*Set RW LOW for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     cb2:	82 e0       	ldi	r24, 0x02	; 2
     cb4:	61 e0       	ldi	r22, 0x01	; 1
     cb6:	40 e0       	ldi	r20, 0x00	; 0
     cb8:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <DIO_u8SetPinValue>

	/*Set Data to data port*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	6f 85       	ldd	r22, Y+15	; 0x0f
     cc0:	0e 94 84 0b 	call	0x1708	; 0x1708 <DIO_u8SetPortValue>

	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	62 e0       	ldi	r22, 0x02	; 2
     cc8:	41 e0       	ldi	r20, 0x01	; 1
     cca:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <DIO_u8SetPinValue>
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	a0 e0       	ldi	r26, 0x00	; 0
     cd4:	b0 e4       	ldi	r27, 0x40	; 64
     cd6:	8b 87       	std	Y+11, r24	; 0x0b
     cd8:	9c 87       	std	Y+12, r25	; 0x0c
     cda:	ad 87       	std	Y+13, r26	; 0x0d
     cdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cde:	6b 85       	ldd	r22, Y+11	; 0x0b
     ce0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	4a ef       	ldi	r20, 0xFA	; 250
     cec:	54 e4       	ldi	r21, 0x44	; 68
     cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	8f 83       	std	Y+7, r24	; 0x07
     cf8:	98 87       	std	Y+8, r25	; 0x08
     cfa:	a9 87       	std	Y+9, r26	; 0x09
     cfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cfe:	6f 81       	ldd	r22, Y+7	; 0x07
     d00:	78 85       	ldd	r23, Y+8	; 0x08
     d02:	89 85       	ldd	r24, Y+9	; 0x09
     d04:	9a 85       	ldd	r25, Y+10	; 0x0a
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 e8       	ldi	r20, 0x80	; 128
     d0c:	5f e3       	ldi	r21, 0x3F	; 63
     d0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d12:	88 23       	and	r24, r24
     d14:	2c f4       	brge	.+10     	; 0xd20 <CLCD_voidSendData+0x9e>
		__ticks = 1;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	9e 83       	std	Y+6, r25	; 0x06
     d1c:	8d 83       	std	Y+5, r24	; 0x05
     d1e:	3f c0       	rjmp	.+126    	; 0xd9e <CLCD_voidSendData+0x11c>
	else if (__tmp > 65535)
     d20:	6f 81       	ldd	r22, Y+7	; 0x07
     d22:	78 85       	ldd	r23, Y+8	; 0x08
     d24:	89 85       	ldd	r24, Y+9	; 0x09
     d26:	9a 85       	ldd	r25, Y+10	; 0x0a
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	3f ef       	ldi	r19, 0xFF	; 255
     d2c:	4f e7       	ldi	r20, 0x7F	; 127
     d2e:	57 e4       	ldi	r21, 0x47	; 71
     d30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d34:	18 16       	cp	r1, r24
     d36:	4c f5       	brge	.+82     	; 0xd8a <CLCD_voidSendData+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d38:	6b 85       	ldd	r22, Y+11	; 0x0b
     d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e2       	ldi	r20, 0x20	; 32
     d46:	51 e4       	ldi	r21, 0x41	; 65
     d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	bc 01       	movw	r22, r24
     d52:	cd 01       	movw	r24, r26
     d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
     d60:	0f c0       	rjmp	.+30     	; 0xd80 <CLCD_voidSendData+0xfe>
     d62:	88 ec       	ldi	r24, 0xC8	; 200
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	9c 83       	std	Y+4, r25	; 0x04
     d68:	8b 83       	std	Y+3, r24	; 0x03
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	9c 81       	ldd	r25, Y+4	; 0x04
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <CLCD_voidSendData+0xec>
     d72:	9c 83       	std	Y+4, r25	; 0x04
     d74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d76:	8d 81       	ldd	r24, Y+5	; 0x05
     d78:	9e 81       	ldd	r25, Y+6	; 0x06
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	9e 83       	std	Y+6, r25	; 0x06
     d7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	9e 81       	ldd	r25, Y+6	; 0x06
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	69 f7       	brne	.-38     	; 0xd62 <CLCD_voidSendData+0xe0>
     d88:	14 c0       	rjmp	.+40     	; 0xdb2 <CLCD_voidSendData+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d8a:	6f 81       	ldd	r22, Y+7	; 0x07
     d8c:	78 85       	ldd	r23, Y+8	; 0x08
     d8e:	89 85       	ldd	r24, Y+9	; 0x09
     d90:	9a 85       	ldd	r25, Y+10	; 0x0a
     d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	9e 83       	std	Y+6, r25	; 0x06
     d9c:	8d 83       	std	Y+5, r24	; 0x05
     d9e:	8d 81       	ldd	r24, Y+5	; 0x05
     da0:	9e 81       	ldd	r25, Y+6	; 0x06
     da2:	9a 83       	std	Y+2, r25	; 0x02
     da4:	89 83       	std	Y+1, r24	; 0x01
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	9a 81       	ldd	r25, Y+2	; 0x02
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <CLCD_voidSendData+0x128>
     dae:	9a 83       	std	Y+2, r25	; 0x02
     db0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	62 e0       	ldi	r22, 0x02	; 2
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <DIO_u8SetPinValue>
	Global_u8CountChar++;
     dbc:	80 91 68 00 	lds	r24, 0x0068
     dc0:	8f 5f       	subi	r24, 0xFF	; 255
     dc2:	80 93 68 00 	sts	0x0068, r24

}
     dc6:	2f 96       	adiw	r28, 0x0f	; 15
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	08 95       	ret

00000dd8 <CLCD_voidInit>:


void CLCD_voidInit(void)
{
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	2e 97       	sbiw	r28, 0x0e	; 14
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a0 e2       	ldi	r26, 0x20	; 32
     df2:	b2 e4       	ldi	r27, 0x42	; 66
     df4:	8b 87       	std	Y+11, r24	; 0x0b
     df6:	9c 87       	std	Y+12, r25	; 0x0c
     df8:	ad 87       	std	Y+13, r26	; 0x0d
     dfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
     dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
     e00:	8d 85       	ldd	r24, Y+13	; 0x0d
     e02:	9e 85       	ldd	r25, Y+14	; 0x0e
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	4a ef       	ldi	r20, 0xFA	; 250
     e0a:	54 e4       	ldi	r21, 0x44	; 68
     e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	8f 83       	std	Y+7, r24	; 0x07
     e16:	98 87       	std	Y+8, r25	; 0x08
     e18:	a9 87       	std	Y+9, r26	; 0x09
     e1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e1c:	6f 81       	ldd	r22, Y+7	; 0x07
     e1e:	78 85       	ldd	r23, Y+8	; 0x08
     e20:	89 85       	ldd	r24, Y+9	; 0x09
     e22:	9a 85       	ldd	r25, Y+10	; 0x0a
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	40 e8       	ldi	r20, 0x80	; 128
     e2a:	5f e3       	ldi	r21, 0x3F	; 63
     e2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e30:	88 23       	and	r24, r24
     e32:	2c f4       	brge	.+10     	; 0xe3e <CLCD_voidInit+0x66>
		__ticks = 1;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	9e 83       	std	Y+6, r25	; 0x06
     e3a:	8d 83       	std	Y+5, r24	; 0x05
     e3c:	3f c0       	rjmp	.+126    	; 0xebc <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     e3e:	6f 81       	ldd	r22, Y+7	; 0x07
     e40:	78 85       	ldd	r23, Y+8	; 0x08
     e42:	89 85       	ldd	r24, Y+9	; 0x09
     e44:	9a 85       	ldd	r25, Y+10	; 0x0a
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	3f ef       	ldi	r19, 0xFF	; 255
     e4a:	4f e7       	ldi	r20, 0x7F	; 127
     e4c:	57 e4       	ldi	r21, 0x47	; 71
     e4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e52:	18 16       	cp	r1, r24
     e54:	4c f5       	brge	.+82     	; 0xea8 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e56:	6b 85       	ldd	r22, Y+11	; 0x0b
     e58:	7c 85       	ldd	r23, Y+12	; 0x0c
     e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e2       	ldi	r20, 0x20	; 32
     e64:	51 e4       	ldi	r21, 0x41	; 65
     e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	bc 01       	movw	r22, r24
     e70:	cd 01       	movw	r24, r26
     e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	9e 83       	std	Y+6, r25	; 0x06
     e7c:	8d 83       	std	Y+5, r24	; 0x05
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <CLCD_voidInit+0xc6>
     e80:	88 ec       	ldi	r24, 0xC8	; 200
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	9c 83       	std	Y+4, r25	; 0x04
     e86:	8b 83       	std	Y+3, r24	; 0x03
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	9c 81       	ldd	r25, Y+4	; 0x04
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <CLCD_voidInit+0xb4>
     e90:	9c 83       	std	Y+4, r25	; 0x04
     e92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e94:	8d 81       	ldd	r24, Y+5	; 0x05
     e96:	9e 81       	ldd	r25, Y+6	; 0x06
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	9e 83       	std	Y+6, r25	; 0x06
     e9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	9e 81       	ldd	r25, Y+6	; 0x06
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	69 f7       	brne	.-38     	; 0xe80 <CLCD_voidInit+0xa8>
     ea6:	14 c0       	rjmp	.+40     	; 0xed0 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea8:	6f 81       	ldd	r22, Y+7	; 0x07
     eaa:	78 85       	ldd	r23, Y+8	; 0x08
     eac:	89 85       	ldd	r24, Y+9	; 0x09
     eae:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	9e 83       	std	Y+6, r25	; 0x06
     eba:	8d 83       	std	Y+5, r24	; 0x05
     ebc:	8d 81       	ldd	r24, Y+5	; 0x05
     ebe:	9e 81       	ldd	r25, Y+6	; 0x06
     ec0:	9a 83       	std	Y+2, r25	; 0x02
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <CLCD_voidInit+0xf0>
     ecc:	9a 83       	std	Y+2, r25	; 0x02
     ece:	89 83       	std	Y+1, r24	; 0x01
	 * 	RS	RW	DB7	 DB6	DB5	  DB4	DB3		DB2 	DB1 	DB0
	 * 	0	0	 0	  0      1	   1     N       F       X       X
	 * NoOflines = 2 , FontSize = 5*8
	 * N = 1 , F = 0*/

	CLCD_voidSendCommand(0b00111000);
     ed0:	88 e3       	ldi	r24, 0x38	; 56
     ed2:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	 * 	RS	RW	DB7	 DB6	DB5	  DB4	DB3		DB2 	DB1 	DB0
	 * 	0	0	 0	  0      0	   0     1       D       C       B
	 * D : Display enable , C : Cursor enable , B : Blink Cursor
	 * D = 1 , C = 0 , B = 0*/

	CLCD_voidSendCommand(0b00001100);
     ed6:	8c e0       	ldi	r24, 0x0C	; 12
     ed8:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*Clear Display*/
	CLCD_voidSendCommand(1);
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	Global_u8CountChar = 0;
     ee2:	10 92 68 00 	sts	0x0068, r1


}
     ee6:	2e 96       	adiw	r28, 0x0e	; 14
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString )
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	00 d0       	rcall	.+0      	; 0xefe <CLCD_voidSendString+0x6>
     efe:	0f 92       	push	r0
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	9b 83       	std	Y+3, r25	; 0x03
     f06:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
     f08:	19 82       	std	Y+1, r1	; 0x01
     f0a:	0e c0       	rjmp	.+28     	; 0xf28 <CLCD_voidSendString+0x30>

	while(Copy_pcString[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	9b 81       	ldd	r25, Y+3	; 0x03
     f16:	fc 01       	movw	r30, r24
     f18:	e2 0f       	add	r30, r18
     f1a:	f3 1f       	adc	r31, r19
     f1c:	80 81       	ld	r24, Z
     f1e:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		Local_u8Counter++;
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	8f 5f       	subi	r24, 0xFF	; 255
     f26:	89 83       	std	Y+1, r24	; 0x01

void CLCD_voidSendString(const char* Copy_pcString )
{
	u8 Local_u8Counter = 0;

	while(Copy_pcString[Local_u8Counter] != '\0')
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	9b 81       	ldd	r25, Y+3	; 0x03
     f32:	fc 01       	movw	r30, r24
     f34:	e2 0f       	add	r30, r18
     f36:	f3 1f       	adc	r31, r19
     f38:	80 81       	ld	r24, Z
     f3a:	88 23       	and	r24, r24
     f3c:	39 f7       	brne	.-50     	; 0xf0c <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;

	}
}
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPose ,u8 Copy_u8YPose)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <CLCD_voidGoToXY+0x6>
     f50:	0f 92       	push	r0
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	8a 83       	std	Y+2, r24	; 0x02
     f58:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if (Copy_u8XPose == 0)
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	88 23       	and	r24, r24
     f5e:	19 f4       	brne	.+6      	; 0xf66 <CLCD_voidGoToXY+0x1c>
	{
		/*Location is at first line */
		Local_u8Address = Copy_u8YPose;
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	89 83       	std	Y+1, r24	; 0x01
     f64:	06 c0       	rjmp	.+12     	; 0xf72 <CLCD_voidGoToXY+0x28>
	}

	else if (Copy_u8XPose == 1)
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	19 f4       	brne	.+6      	; 0xf72 <CLCD_voidGoToXY+0x28>
	{
		/*Location is at second line */
		Local_u8Address = Copy_u8YPose + 0x40;
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	80 5c       	subi	r24, 0xC0	; 192
     f70:	89 83       	std	Y+1, r24	; 0x01
	}

	/*OR to set most bit to 1 to set DDRAM Address*/
	CLCD_voidSendCommand(Local_u8Address | 1<<7);
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	80 68       	ori	r24, 0x80	; 128
     f76:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <CLCD_voidWriteSpcialCharacter>:


void CLCD_voidWriteSpcialCharacter(u8* Copy_pu8Pattern , u8 Copy_u8PatternNum , u8 Copy_u8XPose ,u8 Copy_u8YPose)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	27 97       	sbiw	r28, 0x07	; 7
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	9c 83       	std	Y+4, r25	; 0x04
     f9c:	8b 83       	std	Y+3, r24	; 0x03
     f9e:	6d 83       	std	Y+5, r22	; 0x05
     fa0:	4e 83       	std	Y+6, r20	; 0x06
     fa2:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress = 0;
     fa4:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter = 0;
     fa6:	19 82       	std	Y+1, r1	; 0x01

	/*Calculate CGRAM Adress */
	Local_u8CGRAMAddress = Copy_u8PatternNum *8;
     fa8:	8d 81       	ldd	r24, Y+5	; 0x05
     faa:	88 2f       	mov	r24, r24
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM Address Command to LCD with setting bit 6 and clearing bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress | 1 <<6);
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	80 64       	ori	r24, 0x40	; 64
     fc0:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*Write Pattern Data to GCRAM to Save it*/
	for(Local_u8Counter = 0 ; Local_u8Counter < 8 ; Local_u8Counter++)
     fc4:	19 82       	std	Y+1, r1	; 0x01
     fc6:	0e c0       	rjmp	.+28     	; 0xfe4 <CLCD_voidWriteSpcialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	9c 81       	ldd	r25, Y+4	; 0x04
     fd2:	fc 01       	movw	r30, r24
     fd4:	e2 0f       	add	r30, r18
     fd6:	f3 1f       	adc	r31, r19
     fd8:	80 81       	ld	r24, Z
     fda:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>

	/*Send CGRAM Address Command to LCD with setting bit 6 and clearing bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress | 1 <<6);

	/*Write Pattern Data to GCRAM to Save it*/
	for(Local_u8Counter = 0 ; Local_u8Counter < 8 ; Local_u8Counter++)
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	8f 5f       	subi	r24, 0xFF	; 255
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	88 30       	cpi	r24, 0x08	; 8
     fe8:	78 f3       	brcs	.-34     	; 0xfc8 <CLCD_voidWriteSpcialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);

	}
	/*Go back to DDRAM to display the pattern*/
	CLCD_voidGoToXY(Copy_u8XPose,Copy_u8YPose);
     fea:	8e 81       	ldd	r24, Y+6	; 0x06
     fec:	6f 81       	ldd	r22, Y+7	; 0x07
     fee:	0e 94 a5 07 	call	0xf4a	; 0xf4a <CLCD_voidGoToXY>

	/*Display the pattern written in CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNum);
     ff2:	8d 81       	ldd	r24, Y+5	; 0x05
     ff4:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
}
     ff8:	27 96       	adiw	r28, 0x07	; 7
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u23Number)
{
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	ac 97       	sbiw	r28, 0x2c	; 44
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	6f a3       	std	Y+39, r22	; 0x27
    1024:	78 a7       	std	Y+40, r23	; 0x28
    1026:	89 a7       	std	Y+41, r24	; 0x29
    1028:	9a a7       	std	Y+42, r25	; 0x2a
	u8 Local_u8Counter , Local_u8NumberOfDigits , Local_pu8Arr[30] , Local_u8X , Local_u8Y;
	u32 Local_u32Number = Copy_u23Number;
    102a:	8f a1       	ldd	r24, Y+39	; 0x27
    102c:	98 a5       	ldd	r25, Y+40	; 0x28
    102e:	a9 a5       	ldd	r26, Y+41	; 0x29
    1030:	ba a5       	ldd	r27, Y+42	; 0x2a
    1032:	89 83       	std	Y+1, r24	; 0x01
    1034:	9a 83       	std	Y+2, r25	; 0x02
    1036:	ab 83       	std	Y+3, r26	; 0x03
    1038:	bc 83       	std	Y+4, r27	; 0x04

	Local_u8Counter = 0;
    103a:	18 86       	std	Y+8, r1	; 0x08
	Local_u8NumberOfDigits = 0;
    103c:	1f 82       	std	Y+7, r1	; 0x07
	Local_u8X = 0;
    103e:	1e 82       	std	Y+6, r1	; 0x06
	Local_u8Y = 0;
    1040:	1d 82       	std	Y+5, r1	; 0x05
    1042:	2d c0       	rjmp	.+90     	; 0x109e <CLCD_voidWriteNumber+0x94>

	while(Local_u32Number != 0)
	{
		Local_pu8Arr[Local_u8NumberOfDigits++] = Local_u32Number % 10;
    1044:	8f 81       	ldd	r24, Y+7	; 0x07
    1046:	08 2f       	mov	r16, r24
    1048:	10 e0       	ldi	r17, 0x00	; 0
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	9a 81       	ldd	r25, Y+2	; 0x02
    104e:	ab 81       	ldd	r26, Y+3	; 0x03
    1050:	bc 81       	ldd	r27, Y+4	; 0x04
    1052:	2a e0       	ldi	r18, 0x0A	; 10
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e0       	ldi	r20, 0x00	; 0
    1058:	50 e0       	ldi	r21, 0x00	; 0
    105a:	bc 01       	movw	r22, r24
    105c:	cd 01       	movw	r24, r26
    105e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__udivmodsi4>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	28 2f       	mov	r18, r24
    1068:	ce 01       	movw	r24, r28
    106a:	09 96       	adiw	r24, 0x09	; 9
    106c:	fc 01       	movw	r30, r24
    106e:	e0 0f       	add	r30, r16
    1070:	f1 1f       	adc	r31, r17
    1072:	20 83       	st	Z, r18
    1074:	8f 81       	ldd	r24, Y+7	; 0x07
    1076:	8f 5f       	subi	r24, 0xFF	; 255
    1078:	8f 83       	std	Y+7, r24	; 0x07
		Local_u32Number /= 10;
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	9a 81       	ldd	r25, Y+2	; 0x02
    107e:	ab 81       	ldd	r26, Y+3	; 0x03
    1080:	bc 81       	ldd	r27, Y+4	; 0x04
    1082:	2a e0       	ldi	r18, 0x0A	; 10
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	bc 01       	movw	r22, r24
    108c:	cd 01       	movw	r24, r26
    108e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__udivmodsi4>
    1092:	da 01       	movw	r26, r20
    1094:	c9 01       	movw	r24, r18
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	9a 83       	std	Y+2, r25	; 0x02
    109a:	ab 83       	std	Y+3, r26	; 0x03
    109c:	bc 83       	std	Y+4, r27	; 0x04
	Local_u8Counter = 0;
	Local_u8NumberOfDigits = 0;
	Local_u8X = 0;
	Local_u8Y = 0;

	while(Local_u32Number != 0)
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	9a 81       	ldd	r25, Y+2	; 0x02
    10a2:	ab 81       	ldd	r26, Y+3	; 0x03
    10a4:	bc 81       	ldd	r27, Y+4	; 0x04
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	a1 05       	cpc	r26, r1
    10aa:	b1 05       	cpc	r27, r1
    10ac:	59 f6       	brne	.-106    	; 0x1044 <CLCD_voidWriteNumber+0x3a>
	{
		Local_pu8Arr[Local_u8NumberOfDigits++] = Local_u32Number % 10;
		Local_u32Number /= 10;
	}

	for(Local_u8Counter = Local_u8NumberOfDigits - 1 ; (Local_u8Counter >= 0) && (Local_u8Y < Local_u8NumberOfDigits); Local_u8Counter-- , Local_u8Y++)
    10ae:	8f 81       	ldd	r24, Y+7	; 0x07
    10b0:	81 50       	subi	r24, 0x01	; 1
    10b2:	88 87       	std	Y+8, r24	; 0x08
    10b4:	ad c0       	rjmp	.+346    	; 0x1210 <CLCD_voidWriteNumber+0x206>
	{

		switch(Local_pu8Arr[Local_u8Counter])
    10b6:	88 85       	ldd	r24, Y+8	; 0x08
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	ce 01       	movw	r24, r28
    10be:	09 96       	adiw	r24, 0x09	; 9
    10c0:	fc 01       	movw	r30, r24
    10c2:	e2 0f       	add	r30, r18
    10c4:	f3 1f       	adc	r31, r19
    10c6:	80 81       	ld	r24, Z
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c a7       	std	Y+44, r19	; 0x2c
    10ce:	2b a7       	std	Y+43, r18	; 0x2b
    10d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    10d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    10d4:	84 30       	cpi	r24, 0x04	; 4
    10d6:	91 05       	cpc	r25, r1
    10d8:	09 f4       	brne	.+2      	; 0x10dc <CLCD_voidWriteNumber+0xd2>
    10da:	65 c0       	rjmp	.+202    	; 0x11a6 <CLCD_voidWriteNumber+0x19c>
    10dc:	2b a5       	ldd	r18, Y+43	; 0x2b
    10de:	3c a5       	ldd	r19, Y+44	; 0x2c
    10e0:	25 30       	cpi	r18, 0x05	; 5
    10e2:	31 05       	cpc	r19, r1
    10e4:	e4 f4       	brge	.+56     	; 0x111e <CLCD_voidWriteNumber+0x114>
    10e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    10e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	91 05       	cpc	r25, r1
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <CLCD_voidWriteNumber+0xe8>
    10f0:	42 c0       	rjmp	.+132    	; 0x1176 <CLCD_voidWriteNumber+0x16c>
    10f2:	2b a5       	ldd	r18, Y+43	; 0x2b
    10f4:	3c a5       	ldd	r19, Y+44	; 0x2c
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	2c f4       	brge	.+10     	; 0x1106 <CLCD_voidWriteNumber+0xfc>
    10fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    10fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	89 f1       	breq	.+98     	; 0x1166 <CLCD_voidWriteNumber+0x15c>
    1104:	7f c0       	rjmp	.+254    	; 0x1204 <CLCD_voidWriteNumber+0x1fa>
    1106:	2b a5       	ldd	r18, Y+43	; 0x2b
    1108:	3c a5       	ldd	r19, Y+44	; 0x2c
    110a:	22 30       	cpi	r18, 0x02	; 2
    110c:	31 05       	cpc	r19, r1
    110e:	d9 f1       	breq	.+118    	; 0x1186 <CLCD_voidWriteNumber+0x17c>
    1110:	8b a5       	ldd	r24, Y+43	; 0x2b
    1112:	9c a5       	ldd	r25, Y+44	; 0x2c
    1114:	83 30       	cpi	r24, 0x03	; 3
    1116:	91 05       	cpc	r25, r1
    1118:	09 f4       	brne	.+2      	; 0x111c <CLCD_voidWriteNumber+0x112>
    111a:	3d c0       	rjmp	.+122    	; 0x1196 <CLCD_voidWriteNumber+0x18c>
    111c:	73 c0       	rjmp	.+230    	; 0x1204 <CLCD_voidWriteNumber+0x1fa>
    111e:	2b a5       	ldd	r18, Y+43	; 0x2b
    1120:	3c a5       	ldd	r19, Y+44	; 0x2c
    1122:	27 30       	cpi	r18, 0x07	; 7
    1124:	31 05       	cpc	r19, r1
    1126:	09 f4       	brne	.+2      	; 0x112a <CLCD_voidWriteNumber+0x120>
    1128:	56 c0       	rjmp	.+172    	; 0x11d6 <CLCD_voidWriteNumber+0x1cc>
    112a:	8b a5       	ldd	r24, Y+43	; 0x2b
    112c:	9c a5       	ldd	r25, Y+44	; 0x2c
    112e:	88 30       	cpi	r24, 0x08	; 8
    1130:	91 05       	cpc	r25, r1
    1132:	64 f4       	brge	.+24     	; 0x114c <CLCD_voidWriteNumber+0x142>
    1134:	2b a5       	ldd	r18, Y+43	; 0x2b
    1136:	3c a5       	ldd	r19, Y+44	; 0x2c
    1138:	25 30       	cpi	r18, 0x05	; 5
    113a:	31 05       	cpc	r19, r1
    113c:	e1 f1       	breq	.+120    	; 0x11b6 <CLCD_voidWriteNumber+0x1ac>
    113e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1140:	9c a5       	ldd	r25, Y+44	; 0x2c
    1142:	86 30       	cpi	r24, 0x06	; 6
    1144:	91 05       	cpc	r25, r1
    1146:	09 f4       	brne	.+2      	; 0x114a <CLCD_voidWriteNumber+0x140>
    1148:	3e c0       	rjmp	.+124    	; 0x11c6 <CLCD_voidWriteNumber+0x1bc>
    114a:	5c c0       	rjmp	.+184    	; 0x1204 <CLCD_voidWriteNumber+0x1fa>
    114c:	2b a5       	ldd	r18, Y+43	; 0x2b
    114e:	3c a5       	ldd	r19, Y+44	; 0x2c
    1150:	28 30       	cpi	r18, 0x08	; 8
    1152:	31 05       	cpc	r19, r1
    1154:	09 f4       	brne	.+2      	; 0x1158 <CLCD_voidWriteNumber+0x14e>
    1156:	47 c0       	rjmp	.+142    	; 0x11e6 <CLCD_voidWriteNumber+0x1dc>
    1158:	8b a5       	ldd	r24, Y+43	; 0x2b
    115a:	9c a5       	ldd	r25, Y+44	; 0x2c
    115c:	89 30       	cpi	r24, 0x09	; 9
    115e:	91 05       	cpc	r25, r1
    1160:	09 f4       	brne	.+2      	; 0x1164 <CLCD_voidWriteNumber+0x15a>
    1162:	49 c0       	rjmp	.+146    	; 0x11f6 <CLCD_voidWriteNumber+0x1ec>
    1164:	4f c0       	rjmp	.+158    	; 0x1204 <CLCD_voidWriteNumber+0x1fa>
		{
		case 0 :  CLCD_voidGoToXY(Local_u8X , Local_u8Y); CLCD_voidSendData('0');break;
    1166:	8e 81       	ldd	r24, Y+6	; 0x06
    1168:	6d 81       	ldd	r22, Y+5	; 0x05
    116a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <CLCD_voidGoToXY>
    116e:	80 e3       	ldi	r24, 0x30	; 48
    1170:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1174:	47 c0       	rjmp	.+142    	; 0x1204 <CLCD_voidWriteNumber+0x1fa>
		case 1 :  CLCD_voidGoToXY(Local_u8X , Local_u8Y); CLCD_voidSendData('1');break;
    1176:	8e 81       	ldd	r24, Y+6	; 0x06
    1178:	6d 81       	ldd	r22, Y+5	; 0x05
    117a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <CLCD_voidGoToXY>
    117e:	81 e3       	ldi	r24, 0x31	; 49
    1180:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1184:	3f c0       	rjmp	.+126    	; 0x1204 <CLCD_voidWriteNumber+0x1fa>
		case 2 :  CLCD_voidGoToXY(Local_u8X , Local_u8Y); CLCD_voidSendData('2');break;
    1186:	8e 81       	ldd	r24, Y+6	; 0x06
    1188:	6d 81       	ldd	r22, Y+5	; 0x05
    118a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <CLCD_voidGoToXY>
    118e:	82 e3       	ldi	r24, 0x32	; 50
    1190:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1194:	37 c0       	rjmp	.+110    	; 0x1204 <CLCD_voidWriteNumber+0x1fa>
		case 3 :  CLCD_voidGoToXY(Local_u8X , Local_u8Y); CLCD_voidSendData('3');break;
    1196:	8e 81       	ldd	r24, Y+6	; 0x06
    1198:	6d 81       	ldd	r22, Y+5	; 0x05
    119a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <CLCD_voidGoToXY>
    119e:	83 e3       	ldi	r24, 0x33	; 51
    11a0:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    11a4:	2f c0       	rjmp	.+94     	; 0x1204 <CLCD_voidWriteNumber+0x1fa>
		case 4 :  CLCD_voidGoToXY(Local_u8X , Local_u8Y); CLCD_voidSendData('4');break;
    11a6:	8e 81       	ldd	r24, Y+6	; 0x06
    11a8:	6d 81       	ldd	r22, Y+5	; 0x05
    11aa:	0e 94 a5 07 	call	0xf4a	; 0xf4a <CLCD_voidGoToXY>
    11ae:	84 e3       	ldi	r24, 0x34	; 52
    11b0:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    11b4:	27 c0       	rjmp	.+78     	; 0x1204 <CLCD_voidWriteNumber+0x1fa>
		case 5 :  CLCD_voidGoToXY(Local_u8X , Local_u8Y); CLCD_voidSendData('5');break;
    11b6:	8e 81       	ldd	r24, Y+6	; 0x06
    11b8:	6d 81       	ldd	r22, Y+5	; 0x05
    11ba:	0e 94 a5 07 	call	0xf4a	; 0xf4a <CLCD_voidGoToXY>
    11be:	85 e3       	ldi	r24, 0x35	; 53
    11c0:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    11c4:	1f c0       	rjmp	.+62     	; 0x1204 <CLCD_voidWriteNumber+0x1fa>
		case 6 :  CLCD_voidGoToXY(Local_u8X , Local_u8Y); CLCD_voidSendData('6');break;
    11c6:	8e 81       	ldd	r24, Y+6	; 0x06
    11c8:	6d 81       	ldd	r22, Y+5	; 0x05
    11ca:	0e 94 a5 07 	call	0xf4a	; 0xf4a <CLCD_voidGoToXY>
    11ce:	86 e3       	ldi	r24, 0x36	; 54
    11d0:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    11d4:	17 c0       	rjmp	.+46     	; 0x1204 <CLCD_voidWriteNumber+0x1fa>
		case 7 :  CLCD_voidGoToXY(Local_u8X , Local_u8Y); CLCD_voidSendData('7');break;
    11d6:	8e 81       	ldd	r24, Y+6	; 0x06
    11d8:	6d 81       	ldd	r22, Y+5	; 0x05
    11da:	0e 94 a5 07 	call	0xf4a	; 0xf4a <CLCD_voidGoToXY>
    11de:	87 e3       	ldi	r24, 0x37	; 55
    11e0:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    11e4:	0f c0       	rjmp	.+30     	; 0x1204 <CLCD_voidWriteNumber+0x1fa>
		case 8 :  CLCD_voidGoToXY(Local_u8X , Local_u8Y); CLCD_voidSendData('8');break;
    11e6:	8e 81       	ldd	r24, Y+6	; 0x06
    11e8:	6d 81       	ldd	r22, Y+5	; 0x05
    11ea:	0e 94 a5 07 	call	0xf4a	; 0xf4a <CLCD_voidGoToXY>
    11ee:	88 e3       	ldi	r24, 0x38	; 56
    11f0:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    11f4:	07 c0       	rjmp	.+14     	; 0x1204 <CLCD_voidWriteNumber+0x1fa>
		case 9 :  CLCD_voidGoToXY(Local_u8X , Local_u8Y); CLCD_voidSendData('9');break;
    11f6:	8e 81       	ldd	r24, Y+6	; 0x06
    11f8:	6d 81       	ldd	r22, Y+5	; 0x05
    11fa:	0e 94 a5 07 	call	0xf4a	; 0xf4a <CLCD_voidGoToXY>
    11fe:	89 e3       	ldi	r24, 0x39	; 57
    1200:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	{
		Local_pu8Arr[Local_u8NumberOfDigits++] = Local_u32Number % 10;
		Local_u32Number /= 10;
	}

	for(Local_u8Counter = Local_u8NumberOfDigits - 1 ; (Local_u8Counter >= 0) && (Local_u8Y < Local_u8NumberOfDigits); Local_u8Counter-- , Local_u8Y++)
    1204:	88 85       	ldd	r24, Y+8	; 0x08
    1206:	81 50       	subi	r24, 0x01	; 1
    1208:	88 87       	std	Y+8, r24	; 0x08
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	8f 5f       	subi	r24, 0xFF	; 255
    120e:	8d 83       	std	Y+5, r24	; 0x05
    1210:	9d 81       	ldd	r25, Y+5	; 0x05
    1212:	8f 81       	ldd	r24, Y+7	; 0x07
    1214:	98 17       	cp	r25, r24
    1216:	08 f4       	brcc	.+2      	; 0x121a <CLCD_voidWriteNumber+0x210>
    1218:	4e cf       	rjmp	.-356    	; 0x10b6 <CLCD_voidWriteNumber+0xac>
		case 9 :  CLCD_voidGoToXY(Local_u8X , Local_u8Y); CLCD_voidSendData('9');break;

		}
	}

}
    121a:	ac 96       	adiw	r28, 0x2c	; 44
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	08 95       	ret

00001230 <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_config.h"
#include "DIO_private.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_Direction)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	28 97       	sbiw	r28, 0x08	; 8
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	8a 83       	std	Y+2, r24	; 0x02
    1246:	6b 83       	std	Y+3, r22	; 0x03
    1248:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_Errorstate = 0;
    124a:	19 82       	std	Y+1, r1	; 0x01
    
    if (Copy_u8Pin <= DIO_u8PIN7)
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	88 30       	cpi	r24, 0x08	; 8
    1250:	08 f0       	brcs	.+2      	; 0x1254 <DIO_u8SetPinDirection+0x24>
    1252:	f4 c0       	rjmp	.+488    	; 0x143c <DIO_u8SetPinDirection+0x20c>
        {
            if (Copy_Direction == DIO_u8PIN_INPUT)
    1254:	8c 81       	ldd	r24, Y+4	; 0x04
    1256:	88 23       	and	r24, r24
    1258:	09 f0       	breq	.+2      	; 0x125c <DIO_u8SetPinDirection+0x2c>
    125a:	77 c0       	rjmp	.+238    	; 0x134a <DIO_u8SetPinDirection+0x11a>
            {
              switch(Copy_u8Port)
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	38 87       	std	Y+8, r19	; 0x08
    1264:	2f 83       	std	Y+7, r18	; 0x07
    1266:	8f 81       	ldd	r24, Y+7	; 0x07
    1268:	98 85       	ldd	r25, Y+8	; 0x08
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	91 05       	cpc	r25, r1
    126e:	59 f1       	breq	.+86     	; 0x12c6 <DIO_u8SetPinDirection+0x96>
    1270:	2f 81       	ldd	r18, Y+7	; 0x07
    1272:	38 85       	ldd	r19, Y+8	; 0x08
    1274:	22 30       	cpi	r18, 0x02	; 2
    1276:	31 05       	cpc	r19, r1
    1278:	2c f4       	brge	.+10     	; 0x1284 <DIO_u8SetPinDirection+0x54>
    127a:	8f 81       	ldd	r24, Y+7	; 0x07
    127c:	98 85       	ldd	r25, Y+8	; 0x08
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	69 f0       	breq	.+26     	; 0x129c <DIO_u8SetPinDirection+0x6c>
    1282:	60 c0       	rjmp	.+192    	; 0x1344 <DIO_u8SetPinDirection+0x114>
    1284:	2f 81       	ldd	r18, Y+7	; 0x07
    1286:	38 85       	ldd	r19, Y+8	; 0x08
    1288:	22 30       	cpi	r18, 0x02	; 2
    128a:	31 05       	cpc	r19, r1
    128c:	89 f1       	breq	.+98     	; 0x12f0 <DIO_u8SetPinDirection+0xc0>
    128e:	8f 81       	ldd	r24, Y+7	; 0x07
    1290:	98 85       	ldd	r25, Y+8	; 0x08
    1292:	83 30       	cpi	r24, 0x03	; 3
    1294:	91 05       	cpc	r25, r1
    1296:	09 f4       	brne	.+2      	; 0x129a <DIO_u8SetPinDirection+0x6a>
    1298:	40 c0       	rjmp	.+128    	; 0x131a <DIO_u8SetPinDirection+0xea>
    129a:	54 c0       	rjmp	.+168    	; 0x1344 <DIO_u8SetPinDirection+0x114>
                {
                    case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break; 
    129c:	aa e3       	ldi	r26, 0x3A	; 58
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ea e3       	ldi	r30, 0x3A	; 58
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_u8SetPinDirection+0x8a>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_u8SetPinDirection+0x86>
    12be:	80 95       	com	r24
    12c0:	84 23       	and	r24, r20
    12c2:	8c 93       	st	X, r24
    12c4:	bd c0       	rjmp	.+378    	; 0x1440 <DIO_u8SetPinDirection+0x210>
                    case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break; 
    12c6:	a7 e3       	ldi	r26, 0x37	; 55
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e7 e3       	ldi	r30, 0x37	; 55
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO_u8SetPinDirection+0xb4>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <DIO_u8SetPinDirection+0xb0>
    12e8:	80 95       	com	r24
    12ea:	84 23       	and	r24, r20
    12ec:	8c 93       	st	X, r24
    12ee:	a8 c0       	rjmp	.+336    	; 0x1440 <DIO_u8SetPinDirection+0x210>
                    case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break; 
    12f0:	a4 e3       	ldi	r26, 0x34	; 52
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e4 e3       	ldi	r30, 0x34	; 52
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	48 2f       	mov	r20, r24
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	02 2e       	mov	r0, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <DIO_u8SetPinDirection+0xde>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	0a 94       	dec	r0
    1310:	e2 f7       	brpl	.-8      	; 0x130a <DIO_u8SetPinDirection+0xda>
    1312:	80 95       	com	r24
    1314:	84 23       	and	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	93 c0       	rjmp	.+294    	; 0x1440 <DIO_u8SetPinDirection+0x210>
                    case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break; 
    131a:	a1 e3       	ldi	r26, 0x31	; 49
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e1 e3       	ldi	r30, 0x31	; 49
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <DIO_u8SetPinDirection+0x108>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <DIO_u8SetPinDirection+0x104>
    133c:	80 95       	com	r24
    133e:	84 23       	and	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	7e c0       	rjmp	.+252    	; 0x1440 <DIO_u8SetPinDirection+0x210>
                    default : Local_Errorstate = 1;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	89 83       	std	Y+1, r24	; 0x01
    1348:	7b c0       	rjmp	.+246    	; 0x1440 <DIO_u8SetPinDirection+0x210>
                }
            } 

            else if (Copy_Direction == DIO_u8PIN_OUTPUT)
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	09 f0       	breq	.+2      	; 0x1352 <DIO_u8SetPinDirection+0x122>
    1350:	72 c0       	rjmp	.+228    	; 0x1436 <DIO_u8SetPinDirection+0x206>
            {
                switch(Copy_u8Port)
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	3e 83       	std	Y+6, r19	; 0x06
    135a:	2d 83       	std	Y+5, r18	; 0x05
    135c:	8d 81       	ldd	r24, Y+5	; 0x05
    135e:	9e 81       	ldd	r25, Y+6	; 0x06
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	91 05       	cpc	r25, r1
    1364:	49 f1       	breq	.+82     	; 0x13b8 <DIO_u8SetPinDirection+0x188>
    1366:	2d 81       	ldd	r18, Y+5	; 0x05
    1368:	3e 81       	ldd	r19, Y+6	; 0x06
    136a:	22 30       	cpi	r18, 0x02	; 2
    136c:	31 05       	cpc	r19, r1
    136e:	2c f4       	brge	.+10     	; 0x137a <DIO_u8SetPinDirection+0x14a>
    1370:	8d 81       	ldd	r24, Y+5	; 0x05
    1372:	9e 81       	ldd	r25, Y+6	; 0x06
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	61 f0       	breq	.+24     	; 0x1390 <DIO_u8SetPinDirection+0x160>
    1378:	5b c0       	rjmp	.+182    	; 0x1430 <DIO_u8SetPinDirection+0x200>
    137a:	2d 81       	ldd	r18, Y+5	; 0x05
    137c:	3e 81       	ldd	r19, Y+6	; 0x06
    137e:	22 30       	cpi	r18, 0x02	; 2
    1380:	31 05       	cpc	r19, r1
    1382:	71 f1       	breq	.+92     	; 0x13e0 <DIO_u8SetPinDirection+0x1b0>
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	9e 81       	ldd	r25, Y+6	; 0x06
    1388:	83 30       	cpi	r24, 0x03	; 3
    138a:	91 05       	cpc	r25, r1
    138c:	e9 f1       	breq	.+122    	; 0x1408 <DIO_u8SetPinDirection+0x1d8>
    138e:	50 c0       	rjmp	.+160    	; 0x1430 <DIO_u8SetPinDirection+0x200>
                {
                    case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break; 
    1390:	aa e3       	ldi	r26, 0x3A	; 58
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	ea e3       	ldi	r30, 0x3A	; 58
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <DIO_u8SetPinDirection+0x17e>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <DIO_u8SetPinDirection+0x17a>
    13b2:	84 2b       	or	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	44 c0       	rjmp	.+136    	; 0x1440 <DIO_u8SetPinDirection+0x210>
                    case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break; 
    13b8:	a7 e3       	ldi	r26, 0x37	; 55
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e7 e3       	ldi	r30, 0x37	; 55
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_u8SetPinDirection+0x1a6>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <DIO_u8SetPinDirection+0x1a2>
    13da:	84 2b       	or	r24, r20
    13dc:	8c 93       	st	X, r24
    13de:	30 c0       	rjmp	.+96     	; 0x1440 <DIO_u8SetPinDirection+0x210>
                    case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break; 
    13e0:	a4 e3       	ldi	r26, 0x34	; 52
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e4 e3       	ldi	r30, 0x34	; 52
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_u8SetPinDirection+0x1ce>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_u8SetPinDirection+0x1ca>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	1c c0       	rjmp	.+56     	; 0x1440 <DIO_u8SetPinDirection+0x210>
                    case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break; 
    1408:	a1 e3       	ldi	r26, 0x31	; 49
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e1 e3       	ldi	r30, 0x31	; 49
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_u8SetPinDirection+0x1f6>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_u8SetPinDirection+0x1f2>
    142a:	84 2b       	or	r24, r20
    142c:	8c 93       	st	X, r24
    142e:	08 c0       	rjmp	.+16     	; 0x1440 <DIO_u8SetPinDirection+0x210>
                    default : Local_Errorstate = 1;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	05 c0       	rjmp	.+10     	; 0x1440 <DIO_u8SetPinDirection+0x210>
                }
            }

            else 
            {
                    Local_Errorstate = 1;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <DIO_u8SetPinDirection+0x210>
            
        }
            
        else 
        {
            Local_Errorstate = 1;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	89 83       	std	Y+1, r24	; 0x01
        }
    
    return Local_Errorstate;
    1440:	89 81       	ldd	r24, Y+1	; 0x01
}
    1442:	28 96       	adiw	r28, 0x08	; 8
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8Port ,u8 Copy_Direction)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <DIO_u8SetPortDirection+0x6>
    145a:	00 d0       	rcall	.+0      	; 0x145c <DIO_u8SetPortDirection+0x8>
    145c:	0f 92       	push	r0
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	8a 83       	std	Y+2, r24	; 0x02
    1464:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_Errorstate = 0;
    1466:	19 82       	std	Y+1, r1	; 0x01
    
    
    switch(Copy_u8Port)
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	3d 83       	std	Y+5, r19	; 0x05
    1470:	2c 83       	std	Y+4, r18	; 0x04
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
    1474:	9d 81       	ldd	r25, Y+5	; 0x05
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	91 05       	cpc	r25, r1
    147a:	d1 f0       	breq	.+52     	; 0x14b0 <DIO_u8SetPortDirection+0x5c>
    147c:	2c 81       	ldd	r18, Y+4	; 0x04
    147e:	3d 81       	ldd	r19, Y+5	; 0x05
    1480:	22 30       	cpi	r18, 0x02	; 2
    1482:	31 05       	cpc	r19, r1
    1484:	2c f4       	brge	.+10     	; 0x1490 <DIO_u8SetPortDirection+0x3c>
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	61 f0       	breq	.+24     	; 0x14a6 <DIO_u8SetPortDirection+0x52>
    148e:	1f c0       	rjmp	.+62     	; 0x14ce <DIO_u8SetPortDirection+0x7a>
    1490:	2c 81       	ldd	r18, Y+4	; 0x04
    1492:	3d 81       	ldd	r19, Y+5	; 0x05
    1494:	22 30       	cpi	r18, 0x02	; 2
    1496:	31 05       	cpc	r19, r1
    1498:	81 f0       	breq	.+32     	; 0x14ba <DIO_u8SetPortDirection+0x66>
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	9d 81       	ldd	r25, Y+5	; 0x05
    149e:	83 30       	cpi	r24, 0x03	; 3
    14a0:	91 05       	cpc	r25, r1
    14a2:	81 f0       	breq	.+32     	; 0x14c4 <DIO_u8SetPortDirection+0x70>
    14a4:	14 c0       	rjmp	.+40     	; 0x14ce <DIO_u8SetPortDirection+0x7a>
    {
        case DIO_u8PORTA : DDRA = Copy_Direction;  break; 
    14a6:	ea e3       	ldi	r30, 0x3A	; 58
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	80 83       	st	Z, r24
    14ae:	11 c0       	rjmp	.+34     	; 0x14d2 <DIO_u8SetPortDirection+0x7e>
        case DIO_u8PORTB : DDRB = Copy_Direction;  break; 
    14b0:	e7 e3       	ldi	r30, 0x37	; 55
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	80 83       	st	Z, r24
    14b8:	0c c0       	rjmp	.+24     	; 0x14d2 <DIO_u8SetPortDirection+0x7e>
        case DIO_u8PORTC : DDRC = Copy_Direction;  break; 
    14ba:	e4 e3       	ldi	r30, 0x34	; 52
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	80 83       	st	Z, r24
    14c2:	07 c0       	rjmp	.+14     	; 0x14d2 <DIO_u8SetPortDirection+0x7e>
        case DIO_u8PORTD : DDRD = Copy_Direction;  break; 
    14c4:	e1 e3       	ldi	r30, 0x31	; 49
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	80 83       	st	Z, r24
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <DIO_u8SetPortDirection+0x7e>
        default : Local_Errorstate = 1;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	89 83       	std	Y+1, r24	; 0x01
    }
    
    return Local_Errorstate;
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	28 97       	sbiw	r28, 0x08	; 8
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	8a 83       	std	Y+2, r24	; 0x02
    14fa:	6b 83       	std	Y+3, r22	; 0x03
    14fc:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_Errorstate = 0;
    14fe:	19 82       	std	Y+1, r1	; 0x01
    
    if (Copy_u8Pin <= DIO_u8PIN7)
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	88 30       	cpi	r24, 0x08	; 8
    1504:	08 f0       	brcs	.+2      	; 0x1508 <DIO_u8SetPinValue+0x24>
    1506:	f4 c0       	rjmp	.+488    	; 0x16f0 <DIO_u8SetPinValue+0x20c>
        {
            if (Copy_u8Value == DIO_u8PIN_LOW)
    1508:	8c 81       	ldd	r24, Y+4	; 0x04
    150a:	88 23       	and	r24, r24
    150c:	09 f0       	breq	.+2      	; 0x1510 <DIO_u8SetPinValue+0x2c>
    150e:	77 c0       	rjmp	.+238    	; 0x15fe <DIO_u8SetPinValue+0x11a>
            {
              switch(Copy_u8Port)
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	38 87       	std	Y+8, r19	; 0x08
    1518:	2f 83       	std	Y+7, r18	; 0x07
    151a:	8f 81       	ldd	r24, Y+7	; 0x07
    151c:	98 85       	ldd	r25, Y+8	; 0x08
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	91 05       	cpc	r25, r1
    1522:	59 f1       	breq	.+86     	; 0x157a <DIO_u8SetPinValue+0x96>
    1524:	2f 81       	ldd	r18, Y+7	; 0x07
    1526:	38 85       	ldd	r19, Y+8	; 0x08
    1528:	22 30       	cpi	r18, 0x02	; 2
    152a:	31 05       	cpc	r19, r1
    152c:	2c f4       	brge	.+10     	; 0x1538 <DIO_u8SetPinValue+0x54>
    152e:	8f 81       	ldd	r24, Y+7	; 0x07
    1530:	98 85       	ldd	r25, Y+8	; 0x08
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	69 f0       	breq	.+26     	; 0x1550 <DIO_u8SetPinValue+0x6c>
    1536:	60 c0       	rjmp	.+192    	; 0x15f8 <DIO_u8SetPinValue+0x114>
    1538:	2f 81       	ldd	r18, Y+7	; 0x07
    153a:	38 85       	ldd	r19, Y+8	; 0x08
    153c:	22 30       	cpi	r18, 0x02	; 2
    153e:	31 05       	cpc	r19, r1
    1540:	89 f1       	breq	.+98     	; 0x15a4 <DIO_u8SetPinValue+0xc0>
    1542:	8f 81       	ldd	r24, Y+7	; 0x07
    1544:	98 85       	ldd	r25, Y+8	; 0x08
    1546:	83 30       	cpi	r24, 0x03	; 3
    1548:	91 05       	cpc	r25, r1
    154a:	09 f4       	brne	.+2      	; 0x154e <DIO_u8SetPinValue+0x6a>
    154c:	40 c0       	rjmp	.+128    	; 0x15ce <DIO_u8SetPinValue+0xea>
    154e:	54 c0       	rjmp	.+168    	; 0x15f8 <DIO_u8SetPinValue+0x114>
                {
                    case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break; 
    1550:	ab e3       	ldi	r26, 0x3B	; 59
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	eb e3       	ldi	r30, 0x3B	; 59
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 2e       	mov	r0, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <DIO_u8SetPinValue+0x8a>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	0a 94       	dec	r0
    1570:	e2 f7       	brpl	.-8      	; 0x156a <DIO_u8SetPinValue+0x86>
    1572:	80 95       	com	r24
    1574:	84 23       	and	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	bd c0       	rjmp	.+378    	; 0x16f4 <DIO_u8SetPinValue+0x210>
                    case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break; 
    157a:	a8 e3       	ldi	r26, 0x38	; 56
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e8 e3       	ldi	r30, 0x38	; 56
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_u8SetPinValue+0xb4>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <DIO_u8SetPinValue+0xb0>
    159c:	80 95       	com	r24
    159e:	84 23       	and	r24, r20
    15a0:	8c 93       	st	X, r24
    15a2:	a8 c0       	rjmp	.+336    	; 0x16f4 <DIO_u8SetPinValue+0x210>
                    case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break; 
    15a4:	a5 e3       	ldi	r26, 0x35	; 53
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e5 e3       	ldi	r30, 0x35	; 53
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	48 2f       	mov	r20, r24
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	02 2e       	mov	r0, r18
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <DIO_u8SetPinValue+0xde>
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	0a 94       	dec	r0
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <DIO_u8SetPinValue+0xda>
    15c6:	80 95       	com	r24
    15c8:	84 23       	and	r24, r20
    15ca:	8c 93       	st	X, r24
    15cc:	93 c0       	rjmp	.+294    	; 0x16f4 <DIO_u8SetPinValue+0x210>
                    case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break; 
    15ce:	a2 e3       	ldi	r26, 0x32	; 50
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e2 e3       	ldi	r30, 0x32	; 50
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	48 2f       	mov	r20, r24
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 2e       	mov	r0, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_u8SetPinValue+0x108>
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	0a 94       	dec	r0
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_u8SetPinValue+0x104>
    15f0:	80 95       	com	r24
    15f2:	84 23       	and	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	7e c0       	rjmp	.+252    	; 0x16f4 <DIO_u8SetPinValue+0x210>
                    default : Local_Errorstate = 1;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	7b c0       	rjmp	.+246    	; 0x16f4 <DIO_u8SetPinValue+0x210>
                }
            } 

            else if (Copy_u8Value == DIO_u8PIN_HIGH)
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	09 f0       	breq	.+2      	; 0x1606 <DIO_u8SetPinValue+0x122>
    1604:	72 c0       	rjmp	.+228    	; 0x16ea <DIO_u8SetPinValue+0x206>
            {
                switch(Copy_u8Port)
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	3e 83       	std	Y+6, r19	; 0x06
    160e:	2d 83       	std	Y+5, r18	; 0x05
    1610:	8d 81       	ldd	r24, Y+5	; 0x05
    1612:	9e 81       	ldd	r25, Y+6	; 0x06
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	91 05       	cpc	r25, r1
    1618:	49 f1       	breq	.+82     	; 0x166c <DIO_u8SetPinValue+0x188>
    161a:	2d 81       	ldd	r18, Y+5	; 0x05
    161c:	3e 81       	ldd	r19, Y+6	; 0x06
    161e:	22 30       	cpi	r18, 0x02	; 2
    1620:	31 05       	cpc	r19, r1
    1622:	2c f4       	brge	.+10     	; 0x162e <DIO_u8SetPinValue+0x14a>
    1624:	8d 81       	ldd	r24, Y+5	; 0x05
    1626:	9e 81       	ldd	r25, Y+6	; 0x06
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	61 f0       	breq	.+24     	; 0x1644 <DIO_u8SetPinValue+0x160>
    162c:	5b c0       	rjmp	.+182    	; 0x16e4 <DIO_u8SetPinValue+0x200>
    162e:	2d 81       	ldd	r18, Y+5	; 0x05
    1630:	3e 81       	ldd	r19, Y+6	; 0x06
    1632:	22 30       	cpi	r18, 0x02	; 2
    1634:	31 05       	cpc	r19, r1
    1636:	71 f1       	breq	.+92     	; 0x1694 <DIO_u8SetPinValue+0x1b0>
    1638:	8d 81       	ldd	r24, Y+5	; 0x05
    163a:	9e 81       	ldd	r25, Y+6	; 0x06
    163c:	83 30       	cpi	r24, 0x03	; 3
    163e:	91 05       	cpc	r25, r1
    1640:	e9 f1       	breq	.+122    	; 0x16bc <DIO_u8SetPinValue+0x1d8>
    1642:	50 c0       	rjmp	.+160    	; 0x16e4 <DIO_u8SetPinValue+0x200>
                {
                    case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break; 
    1644:	ab e3       	ldi	r26, 0x3B	; 59
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	eb e3       	ldi	r30, 0x3B	; 59
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	02 2e       	mov	r0, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <DIO_u8SetPinValue+0x17e>
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	0a 94       	dec	r0
    1664:	e2 f7       	brpl	.-8      	; 0x165e <DIO_u8SetPinValue+0x17a>
    1666:	84 2b       	or	r24, r20
    1668:	8c 93       	st	X, r24
    166a:	44 c0       	rjmp	.+136    	; 0x16f4 <DIO_u8SetPinValue+0x210>
                    case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break; 
    166c:	a8 e3       	ldi	r26, 0x38	; 56
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e8 e3       	ldi	r30, 0x38	; 56
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	48 2f       	mov	r20, r24
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 2e       	mov	r0, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <DIO_u8SetPinValue+0x1a6>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	0a 94       	dec	r0
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <DIO_u8SetPinValue+0x1a2>
    168e:	84 2b       	or	r24, r20
    1690:	8c 93       	st	X, r24
    1692:	30 c0       	rjmp	.+96     	; 0x16f4 <DIO_u8SetPinValue+0x210>
                    case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break; 
    1694:	a5 e3       	ldi	r26, 0x35	; 53
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e5 e3       	ldi	r30, 0x35	; 53
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	48 2f       	mov	r20, r24
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 2e       	mov	r0, r18
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <DIO_u8SetPinValue+0x1ce>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	0a 94       	dec	r0
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <DIO_u8SetPinValue+0x1ca>
    16b6:	84 2b       	or	r24, r20
    16b8:	8c 93       	st	X, r24
    16ba:	1c c0       	rjmp	.+56     	; 0x16f4 <DIO_u8SetPinValue+0x210>
                    case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break; 
    16bc:	a2 e3       	ldi	r26, 0x32	; 50
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e2 e3       	ldi	r30, 0x32	; 50
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <DIO_u8SetPinValue+0x1f6>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <DIO_u8SetPinValue+0x1f2>
    16de:	84 2b       	or	r24, r20
    16e0:	8c 93       	st	X, r24
    16e2:	08 c0       	rjmp	.+16     	; 0x16f4 <DIO_u8SetPinValue+0x210>
                    default : Local_Errorstate = 1;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	05 c0       	rjmp	.+10     	; 0x16f4 <DIO_u8SetPinValue+0x210>
                }
            }

            else 
            {
                Local_Errorstate = 1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <DIO_u8SetPinValue+0x210>
            
        }
            
        else 
        {
            Local_Errorstate = 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	89 83       	std	Y+1, r24	; 0x01
        }
    
    return Local_Errorstate;
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f6:	28 96       	adiw	r28, 0x08	; 8
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port , u8 Copy_u8Value)
{
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	00 d0       	rcall	.+0      	; 0x170e <DIO_u8SetPortValue+0x6>
    170e:	00 d0       	rcall	.+0      	; 0x1710 <DIO_u8SetPortValue+0x8>
    1710:	0f 92       	push	r0
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	8a 83       	std	Y+2, r24	; 0x02
    1718:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_Errorstate = 0;
    171a:	19 82       	std	Y+1, r1	; 0x01
    
    switch(Copy_u8Port)
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	3d 83       	std	Y+5, r19	; 0x05
    1724:	2c 83       	std	Y+4, r18	; 0x04
    1726:	8c 81       	ldd	r24, Y+4	; 0x04
    1728:	9d 81       	ldd	r25, Y+5	; 0x05
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	91 05       	cpc	r25, r1
    172e:	d1 f0       	breq	.+52     	; 0x1764 <DIO_u8SetPortValue+0x5c>
    1730:	2c 81       	ldd	r18, Y+4	; 0x04
    1732:	3d 81       	ldd	r19, Y+5	; 0x05
    1734:	22 30       	cpi	r18, 0x02	; 2
    1736:	31 05       	cpc	r19, r1
    1738:	2c f4       	brge	.+10     	; 0x1744 <DIO_u8SetPortValue+0x3c>
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
    173c:	9d 81       	ldd	r25, Y+5	; 0x05
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	61 f0       	breq	.+24     	; 0x175a <DIO_u8SetPortValue+0x52>
    1742:	1f c0       	rjmp	.+62     	; 0x1782 <DIO_u8SetPortValue+0x7a>
    1744:	2c 81       	ldd	r18, Y+4	; 0x04
    1746:	3d 81       	ldd	r19, Y+5	; 0x05
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	31 05       	cpc	r19, r1
    174c:	81 f0       	breq	.+32     	; 0x176e <DIO_u8SetPortValue+0x66>
    174e:	8c 81       	ldd	r24, Y+4	; 0x04
    1750:	9d 81       	ldd	r25, Y+5	; 0x05
    1752:	83 30       	cpi	r24, 0x03	; 3
    1754:	91 05       	cpc	r25, r1
    1756:	81 f0       	breq	.+32     	; 0x1778 <DIO_u8SetPortValue+0x70>
    1758:	14 c0       	rjmp	.+40     	; 0x1782 <DIO_u8SetPortValue+0x7a>
    {
        case DIO_u8PORTA : PORTA = Copy_u8Value;  break; 
    175a:	eb e3       	ldi	r30, 0x3B	; 59
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	80 83       	st	Z, r24
    1762:	11 c0       	rjmp	.+34     	; 0x1786 <DIO_u8SetPortValue+0x7e>
        case DIO_u8PORTB : PORTB = Copy_u8Value;  break; 
    1764:	e8 e3       	ldi	r30, 0x38	; 56
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	80 83       	st	Z, r24
    176c:	0c c0       	rjmp	.+24     	; 0x1786 <DIO_u8SetPortValue+0x7e>
        case DIO_u8PORTC : PORTC = Copy_u8Value;  break; 
    176e:	e5 e3       	ldi	r30, 0x35	; 53
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	80 83       	st	Z, r24
    1776:	07 c0       	rjmp	.+14     	; 0x1786 <DIO_u8SetPortValue+0x7e>
        case DIO_u8PORTD : PORTD = Copy_u8Value;  break; 
    1778:	e2 e3       	ldi	r30, 0x32	; 50
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	80 83       	st	Z, r24
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <DIO_u8SetPortValue+0x7e>
        default : Local_Errorstate = 1;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	89 83       	std	Y+1, r24	; 0x01
    }
    
    return Local_Errorstate;
    1786:	89 81       	ldd	r24, Y+1	; 0x01
}
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8* Copy_pu8Value)
{
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	27 97       	sbiw	r28, 0x07	; 7
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	8a 83       	std	Y+2, r24	; 0x02
    17ae:	6b 83       	std	Y+3, r22	; 0x03
    17b0:	5d 83       	std	Y+5, r21	; 0x05
    17b2:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_Errorstate = 0;
    17b4:	19 82       	std	Y+1, r1	; 0x01
    
    if ((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7))
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <DIO_u8GetPinValue+0x28>
    17be:	78 c0       	rjmp	.+240    	; 0x18b0 <DIO_u8GetPinValue+0x118>
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	88 30       	cpi	r24, 0x08	; 8
    17c4:	08 f0       	brcs	.+2      	; 0x17c8 <DIO_u8GetPinValue+0x30>
    17c6:	74 c0       	rjmp	.+232    	; 0x18b0 <DIO_u8GetPinValue+0x118>
        {
            
            switch(Copy_u8Port)
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	3f 83       	std	Y+7, r19	; 0x07
    17d0:	2e 83       	std	Y+6, r18	; 0x06
    17d2:	4e 81       	ldd	r20, Y+6	; 0x06
    17d4:	5f 81       	ldd	r21, Y+7	; 0x07
    17d6:	41 30       	cpi	r20, 0x01	; 1
    17d8:	51 05       	cpc	r21, r1
    17da:	59 f1       	breq	.+86     	; 0x1832 <DIO_u8GetPinValue+0x9a>
    17dc:	8e 81       	ldd	r24, Y+6	; 0x06
    17de:	9f 81       	ldd	r25, Y+7	; 0x07
    17e0:	82 30       	cpi	r24, 0x02	; 2
    17e2:	91 05       	cpc	r25, r1
    17e4:	34 f4       	brge	.+12     	; 0x17f2 <DIO_u8GetPinValue+0x5a>
    17e6:	2e 81       	ldd	r18, Y+6	; 0x06
    17e8:	3f 81       	ldd	r19, Y+7	; 0x07
    17ea:	21 15       	cp	r18, r1
    17ec:	31 05       	cpc	r19, r1
    17ee:	69 f0       	breq	.+26     	; 0x180a <DIO_u8GetPinValue+0x72>
    17f0:	5c c0       	rjmp	.+184    	; 0x18aa <DIO_u8GetPinValue+0x112>
    17f2:	4e 81       	ldd	r20, Y+6	; 0x06
    17f4:	5f 81       	ldd	r21, Y+7	; 0x07
    17f6:	42 30       	cpi	r20, 0x02	; 2
    17f8:	51 05       	cpc	r21, r1
    17fa:	79 f1       	breq	.+94     	; 0x185a <DIO_u8GetPinValue+0xc2>
    17fc:	8e 81       	ldd	r24, Y+6	; 0x06
    17fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1800:	83 30       	cpi	r24, 0x03	; 3
    1802:	91 05       	cpc	r25, r1
    1804:	09 f4       	brne	.+2      	; 0x1808 <DIO_u8GetPinValue+0x70>
    1806:	3d c0       	rjmp	.+122    	; 0x1882 <DIO_u8GetPinValue+0xea>
    1808:	50 c0       	rjmp	.+160    	; 0x18aa <DIO_u8GetPinValue+0x112>
            {
                case DIO_u8PORTA : *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break; 
    180a:	e9 e3       	ldi	r30, 0x39	; 57
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	88 2f       	mov	r24, r24
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a9 01       	movw	r20, r18
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <DIO_u8GetPinValue+0x8a>
    181e:	55 95       	asr	r21
    1820:	47 95       	ror	r20
    1822:	8a 95       	dec	r24
    1824:	e2 f7       	brpl	.-8      	; 0x181e <DIO_u8GetPinValue+0x86>
    1826:	ca 01       	movw	r24, r20
    1828:	81 70       	andi	r24, 0x01	; 1
    182a:	ec 81       	ldd	r30, Y+4	; 0x04
    182c:	fd 81       	ldd	r31, Y+5	; 0x05
    182e:	80 83       	st	Z, r24
    1830:	41 c0       	rjmp	.+130    	; 0x18b4 <DIO_u8GetPinValue+0x11c>
                case DIO_u8PORTB : *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break; 
    1832:	e6 e3       	ldi	r30, 0x36	; 54
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	88 2f       	mov	r24, r24
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	a9 01       	movw	r20, r18
    1844:	02 c0       	rjmp	.+4      	; 0x184a <DIO_u8GetPinValue+0xb2>
    1846:	55 95       	asr	r21
    1848:	47 95       	ror	r20
    184a:	8a 95       	dec	r24
    184c:	e2 f7       	brpl	.-8      	; 0x1846 <DIO_u8GetPinValue+0xae>
    184e:	ca 01       	movw	r24, r20
    1850:	81 70       	andi	r24, 0x01	; 1
    1852:	ec 81       	ldd	r30, Y+4	; 0x04
    1854:	fd 81       	ldd	r31, Y+5	; 0x05
    1856:	80 83       	st	Z, r24
    1858:	2d c0       	rjmp	.+90     	; 0x18b4 <DIO_u8GetPinValue+0x11c>
                case DIO_u8PORTC : *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break; 
    185a:	e3 e3       	ldi	r30, 0x33	; 51
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	88 2f       	mov	r24, r24
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	a9 01       	movw	r20, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <DIO_u8GetPinValue+0xda>
    186e:	55 95       	asr	r21
    1870:	47 95       	ror	r20
    1872:	8a 95       	dec	r24
    1874:	e2 f7       	brpl	.-8      	; 0x186e <DIO_u8GetPinValue+0xd6>
    1876:	ca 01       	movw	r24, r20
    1878:	81 70       	andi	r24, 0x01	; 1
    187a:	ec 81       	ldd	r30, Y+4	; 0x04
    187c:	fd 81       	ldd	r31, Y+5	; 0x05
    187e:	80 83       	st	Z, r24
    1880:	19 c0       	rjmp	.+50     	; 0x18b4 <DIO_u8GetPinValue+0x11c>
                case DIO_u8PORTD : *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break; 
    1882:	e0 e3       	ldi	r30, 0x30	; 48
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	88 2f       	mov	r24, r24
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a9 01       	movw	r20, r18
    1894:	02 c0       	rjmp	.+4      	; 0x189a <DIO_u8GetPinValue+0x102>
    1896:	55 95       	asr	r21
    1898:	47 95       	ror	r20
    189a:	8a 95       	dec	r24
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <DIO_u8GetPinValue+0xfe>
    189e:	ca 01       	movw	r24, r20
    18a0:	81 70       	andi	r24, 0x01	; 1
    18a2:	ec 81       	ldd	r30, Y+4	; 0x04
    18a4:	fd 81       	ldd	r31, Y+5	; 0x05
    18a6:	80 83       	st	Z, r24
    18a8:	05 c0       	rjmp	.+10     	; 0x18b4 <DIO_u8GetPinValue+0x11c>
                default : Local_Errorstate = 1;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <DIO_u8GetPinValue+0x11c>
            
        }
            
        else 
        {
            Local_Errorstate = 1;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	89 83       	std	Y+1, r24	; 0x01
        }
    
    return Local_Errorstate;
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18b6:	27 96       	adiw	r28, 0x07	; 7
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <main>:

#include "DIO_interface.h"
#include "CLCD_interface.h"

void main(void)
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <main+0x6>
    18ce:	00 d0       	rcall	.+0      	; 0x18d0 <main+0x8>
    18d0:	0f 92       	push	r0
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Counter, Local_u8Up,Local_u8DN,Local_u8Right,Local_u8Left;

	/*Set Port A for 4 control switches */
	DIO_u8SetPortDirection(DIO_u8PORTD,DIO_u8PORT_INPUT);
    18d6:	83 e0       	ldi	r24, 0x03	; 3
    18d8:	60 e0       	ldi	r22, 0x00	; 0
    18da:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(DIO_u8PORTD,DIO_u8PORT_HIGH);
    18de:	83 e0       	ldi	r24, 0x03	; 3
    18e0:	6f ef       	ldi	r22, 0xFF	; 255
    18e2:	0e 94 84 0b 	call	0x1708	; 0x1708 <DIO_u8SetPortValue>

	/*Initialize LCD Direction */

	DIO_u8SetPortDirection(DIO_u8PORTA,DIO_u8PORT_OUTPUT);
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	6f ef       	ldi	r22, 0xFF	; 255
    18ea:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_OUTPUT);
    18ee:	82 e0       	ldi	r24, 0x02	; 2
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	41 e0       	ldi	r20, 0x01	; 1
    18f4:	0e 94 18 09 	call	0x1230	; 0x1230 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_OUTPUT);
    18f8:	82 e0       	ldi	r24, 0x02	; 2
    18fa:	61 e0       	ldi	r22, 0x01	; 1
    18fc:	41 e0       	ldi	r20, 0x01	; 1
    18fe:	0e 94 18 09 	call	0x1230	; 0x1230 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN2,DIO_u8PIN_OUTPUT);
    1902:	82 e0       	ldi	r24, 0x02	; 2
    1904:	62 e0       	ldi	r22, 0x02	; 2
    1906:	41 e0       	ldi	r20, 0x01	; 1
    1908:	0e 94 18 09 	call	0x1230	; 0x1230 <DIO_u8SetPinDirection>

	CLCD_voidInit();
    190c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <CLCD_voidInit>
//	CLCD_voidSendString("Hanin Mohammed Anwar Mohammed Hassan");
//	CLCD_voidSendString("HaninMohammedAnwarMohammedHassan");
	CLCD_voidSendData('0');
    1910:	80 e3       	ldi	r24, 0x30	; 48
    1912:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	CLCD_voidSendData('1');
    1916:	81 e3       	ldi	r24, 0x31	; 49
    1918:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	CLCD_voidSendData('2');
    191c:	82 e3       	ldi	r24, 0x32	; 50
    191e:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	CLCD_voidSendData('3');
    1922:	83 e3       	ldi	r24, 0x33	; 51
    1924:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	CLCD_voidSendData('4');
    1928:	84 e3       	ldi	r24, 0x34	; 52
    192a:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	CLCD_voidSendData('5');
    192e:	85 e3       	ldi	r24, 0x35	; 53
    1930:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	CLCD_voidSendData('6');
    1934:	86 e3       	ldi	r24, 0x36	; 54
    1936:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	CLCD_voidSendData('7');
    193a:	87 e3       	ldi	r24, 0x37	; 55
    193c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	CLCD_voidSendData('8');
    1940:	88 e3       	ldi	r24, 0x38	; 56
    1942:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	CLCD_voidSendData('9');
    1946:	89 e3       	ldi	r24, 0x39	; 57
    1948:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	CLCD_voidSendData('0');
    194c:	80 e3       	ldi	r24, 0x30	; 48
    194e:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	CLCD_voidSendData('1');
    1952:	81 e3       	ldi	r24, 0x31	; 49
    1954:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	CLCD_voidSendData('2');
    1958:	82 e3       	ldi	r24, 0x32	; 50
    195a:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	CLCD_voidSendData('3');
    195e:	83 e3       	ldi	r24, 0x33	; 51
    1960:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	CLCD_voidSendData('4');
    1964:	84 e3       	ldi	r24, 0x34	; 52
    1966:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	CLCD_voidSendData('5');
    196a:	85 e3       	ldi	r24, 0x35	; 53
    196c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	CLCD_voidSendData('6');
    1970:	86 e3       	ldi	r24, 0x36	; 54
    1972:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1976:	ff cf       	rjmp	.-2      	; 0x1976 <main+0xae>

00001978 <__udivmodsi4>:
    1978:	a1 e2       	ldi	r26, 0x21	; 33
    197a:	1a 2e       	mov	r1, r26
    197c:	aa 1b       	sub	r26, r26
    197e:	bb 1b       	sub	r27, r27
    1980:	fd 01       	movw	r30, r26
    1982:	0d c0       	rjmp	.+26     	; 0x199e <__udivmodsi4_ep>

00001984 <__udivmodsi4_loop>:
    1984:	aa 1f       	adc	r26, r26
    1986:	bb 1f       	adc	r27, r27
    1988:	ee 1f       	adc	r30, r30
    198a:	ff 1f       	adc	r31, r31
    198c:	a2 17       	cp	r26, r18
    198e:	b3 07       	cpc	r27, r19
    1990:	e4 07       	cpc	r30, r20
    1992:	f5 07       	cpc	r31, r21
    1994:	20 f0       	brcs	.+8      	; 0x199e <__udivmodsi4_ep>
    1996:	a2 1b       	sub	r26, r18
    1998:	b3 0b       	sbc	r27, r19
    199a:	e4 0b       	sbc	r30, r20
    199c:	f5 0b       	sbc	r31, r21

0000199e <__udivmodsi4_ep>:
    199e:	66 1f       	adc	r22, r22
    19a0:	77 1f       	adc	r23, r23
    19a2:	88 1f       	adc	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	1a 94       	dec	r1
    19a8:	69 f7       	brne	.-38     	; 0x1984 <__udivmodsi4_loop>
    19aa:	60 95       	com	r22
    19ac:	70 95       	com	r23
    19ae:	80 95       	com	r24
    19b0:	90 95       	com	r25
    19b2:	9b 01       	movw	r18, r22
    19b4:	ac 01       	movw	r20, r24
    19b6:	bd 01       	movw	r22, r26
    19b8:	cf 01       	movw	r24, r30
    19ba:	08 95       	ret

000019bc <__prologue_saves__>:
    19bc:	2f 92       	push	r2
    19be:	3f 92       	push	r3
    19c0:	4f 92       	push	r4
    19c2:	5f 92       	push	r5
    19c4:	6f 92       	push	r6
    19c6:	7f 92       	push	r7
    19c8:	8f 92       	push	r8
    19ca:	9f 92       	push	r9
    19cc:	af 92       	push	r10
    19ce:	bf 92       	push	r11
    19d0:	cf 92       	push	r12
    19d2:	df 92       	push	r13
    19d4:	ef 92       	push	r14
    19d6:	ff 92       	push	r15
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	ca 1b       	sub	r28, r26
    19e6:	db 0b       	sbc	r29, r27
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	09 94       	ijmp

000019f4 <__epilogue_restores__>:
    19f4:	2a 88       	ldd	r2, Y+18	; 0x12
    19f6:	39 88       	ldd	r3, Y+17	; 0x11
    19f8:	48 88       	ldd	r4, Y+16	; 0x10
    19fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    19fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    19fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a00:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a02:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a04:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a06:	b9 84       	ldd	r11, Y+9	; 0x09
    1a08:	c8 84       	ldd	r12, Y+8	; 0x08
    1a0a:	df 80       	ldd	r13, Y+7	; 0x07
    1a0c:	ee 80       	ldd	r14, Y+6	; 0x06
    1a0e:	fd 80       	ldd	r15, Y+5	; 0x05
    1a10:	0c 81       	ldd	r16, Y+4	; 0x04
    1a12:	1b 81       	ldd	r17, Y+3	; 0x03
    1a14:	aa 81       	ldd	r26, Y+2	; 0x02
    1a16:	b9 81       	ldd	r27, Y+1	; 0x01
    1a18:	ce 0f       	add	r28, r30
    1a1a:	d1 1d       	adc	r29, r1
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	cd bf       	out	0x3d, r28	; 61
    1a26:	ed 01       	movw	r28, r26
    1a28:	08 95       	ret

00001a2a <_exit>:
    1a2a:	f8 94       	cli

00001a2c <__stop_program>:
    1a2c:	ff cf       	rjmp	.-2      	; 0x1a2c <__stop_program>
